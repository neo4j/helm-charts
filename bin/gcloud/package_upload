#!/usr/bin/env bash

# This packages helm charts into signed tarballs

# make bash play nicely
#
set -o pipefail -o errtrace -o errexit -o nounset
shopt -s inherit_errexit
[[ -n "${TRACE:-}" ]] && set -o xtrace

PACKAGE_SIGNING_KEYRING_DIR=/root/.gnupg
mkdir -p ${PACKAGE_SIGNING_KEYRING_DIR}
PACKAGE_SIGNING_KEYRING=${PACKAGE_SIGNING_KEYRING_DIR}/secring.gpg

# Local env vars
#
BUILD_OUT_DIR="tmp/new-packages/"
S3_LOCAL_SYNC_DIR="tmp/release-packages"
S3_UPLOAD_TO_SUB_FOLDER="${S3_SUB_FOLDER:-neo4j}"
S3_CACHE_CONTROL_MAX_AGE_SECONDS="${S3_CACHE_CONTROL_MAX_AGE_SECONDS:-300}"

# Required env vars
#
# to create a keyring try gpg --export-secret-keys "<ID of the key you want to use to sign>" >~/.gnupg/secring.gpg
#PACKAGE_SIGNING_KEYRING="${PACKAGE_SIGNING_KEYRING:?PACKAGE_SIGNING_KEYRING is required}"
PACKAGE_SIGNING_KEY="${PACKAGE_SIGNING_KEY:?PACKAGE_SIGNING_KEY is required}"
PACKAGE_SIGNING_PASSPHRASE="${PACKAGE_SIGNING_PASSPHRASE:?PACKAGE_SIGNING_PASSPHRASE is required}"
gpg --no-default-keyring --homedir /origGPG/.gnupg --export -o ${PACKAGE_SIGNING_KEYRING_DIR}/pubring.gpg ${PACKAGE_SIGNING_KEY}
gpg --no-default-keyring --homedir /origGPG/.gnupg --export-secret-keys -o ${PACKAGE_SIGNING_KEYRING} ${PACKAGE_SIGNING_KEY}


if [ ${S3_UPLOAD_TO_SUB_FOLDER} == "neo4j" ]; then
    CHART_VERSION=$(helm show chart ./neo4j| grep -E "version:(.*)" | awk -F ": " '{print $2}')
    tar -czvf "neo4j-helm-charts-${CHART_VERSION}.tgz" neo4j neo4j-persistent-volume neo4j-headless-service neo4j-docker-desktop-pv neo4j-admin neo4j-reverse-proxy neo4j-loadbalancer
    aws s3 cp --acl public-read "neo4j-helm-charts-${CHART_VERSION}.tgz" s3://dist.neo4j.org/helm/
    rm -f "neo4j-helm-charts-${CHART_VERSION}.tgz"
fi

# create the package!
echo $PACKAGE_SIGNING_PASSPHRASE | helm package --sign ./neo4j --key "${PACKAGE_SIGNING_KEY}" --keyring="${PACKAGE_SIGNING_KEYRING}" --passphrase-file -
echo $PACKAGE_SIGNING_PASSPHRASE | helm package --sign ./neo4j-admin --key "${PACKAGE_SIGNING_KEY}" --keyring="${PACKAGE_SIGNING_KEYRING}" --passphrase-file -
echo $PACKAGE_SIGNING_PASSPHRASE | helm package --sign ./neo4j-headless-service --key "${PACKAGE_SIGNING_KEY}" --keyring="${PACKAGE_SIGNING_KEYRING}" --passphrase-file -
echo $PACKAGE_SIGNING_PASSPHRASE | helm package --sign ./neo4j-persistent-volume --key "${PACKAGE_SIGNING_KEY}" --keyring="${PACKAGE_SIGNING_KEYRING}" --passphrase-file -
echo $PACKAGE_SIGNING_PASSPHRASE | helm package --sign ./neo4j-reverse-proxy --key "${PACKAGE_SIGNING_KEY}" --keyring="${PACKAGE_SIGNING_KEYRING}" --passphrase-file -
echo $PACKAGE_SIGNING_PASSPHRASE | helm package --sign ./neo4j-loadbalancer --key "${PACKAGE_SIGNING_KEY}" --keyring="${PACKAGE_SIGNING_KEYRING}" --passphrase-file -
# echo $PACKAGE_SIGNING_PASSPHRASE | helm package --sign ./neo4j-docker-desktop-pv --key "${PACKAGE_SIGNING_KEY}" --keyring="${PACKAGE_SIGNING_KEYRING}" --passphrase-file -

echo "Copying packaged files to ${BUILD_OUT_DIR}"

mkdir -p ${BUILD_OUT_DIR}
mv *.tgz ${BUILD_OUT_DIR}
mv *.tgz.prov ${BUILD_OUT_DIR}

# Upload packages

# Pull existing packages from s3
#
mkdir -p ${S3_LOCAL_SYNC_DIR}
aws s3 sync s3://helm.neo4j.com/${S3_UPLOAD_TO_SUB_FOLDER} ${S3_LOCAL_SYNC_DIR}
cp ${BUILD_OUT_DIR}/* ${S3_LOCAL_SYNC_DIR} || echo "nothing to upload in ./packages/"

# Create index.yaml
#
helm repo index ${S3_LOCAL_SYNC_DIR} --url https://helm.neo4j.com/${S3_UPLOAD_TO_SUB_FOLDER}

# Upload new packages to s3
#
aws s3 sync --acl bucket-owner-full-control --cache-control max-age=${S3_CACHE_CONTROL_MAX_AGE_SECONDS} ${S3_LOCAL_SYNC_DIR} s3://helm.neo4j.com/${S3_UPLOAD_TO_SUB_FOLDER}
# Clean up local packages
#rm ./packages/*
