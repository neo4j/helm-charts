
{{- template "neo4j.imageCredentials.checkForDuplicates" . -}}
{{- template "neo4j.imageCredentials.checkForEmptyFields" . -}}

{{- range $index, $imagePullSecret := $.Values.image.imagePullSecrets -}}
    {{/* This is to avoid empty or spaces in imagePullSecrets*/}}
    {{- if ne (len ($imagePullSecret | trim)) 0 -}}
      {{- $imagePullSecret = $imagePullSecret | trim -}}
      {{- $secret := (lookup "v1" "Secret" $.Release.Namespace $imagePullSecret) -}}
      {{- $secretExists := $secret | all -}}
      {{- $imageCredentialElement := include "neo4j.imageCredentials.getImageCredential" (dict "imagePullSecret" $imagePullSecret "imageCredentials" $.Values.image.imageCredentials) | fromYaml -}}

      {{/* create secret only and only if does not exist in the cluster */}}
      {{- if not $secretExists -}}

        {{/* throw error if there is no imageCredential entry for the respective imagePullSecret*/}}
        {{- if empty $imageCredentialElement -}}
          {{ fail (printf "No docker-registry secret exists for imagePullSecret \"%s\" in the cluster. \n Missing imageCredential entry for \"%s\"" $imagePullSecret $imagePullSecret) }}
        {{- else }}
apiVersion: v1
kind: Secret
metadata:
   name: "{{ $imageCredentialElement.name }}"
   namespace: "{{ $.Release.Namespace }}"
   labels:
     app: "{{ $.Values.neo4j.name | default $.Release.Name }}"
    {{- include "neo4j.labels" $.Values.neo4j | indent 4 }}
type: kubernetes.io/dockerconfigjson
data:
    .dockerconfigjson: {{ include "neo4j.imagePullSecret.dockerConfigJson" $imageCredentialElement }}
---
        {{- end -}}
      {{- end -}}
  {{- end }}
{{- end -}}
